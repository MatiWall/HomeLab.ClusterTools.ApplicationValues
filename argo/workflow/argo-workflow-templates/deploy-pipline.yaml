apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: deploy-pipline
spec:
  entrypoint: build-and-deploy
  serviceAccountName: argo-workflow-svc
  volumeClaimTemplates:                 # define volume, same syntax as k8s Pod spec
    - metadata:
        name: workdir                     # name of volume claim
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

  arguments:
    parameters:
      - name: giturl
        value: git@github.com:MatiWall/  # Provide the correct GitHub URL here
      - name: revision
        value: HEAD
      - name: branch
        value: master
      - name: repo
        value: catcode-backend
      - name: subpath
        value: services/core-api
      - name: registry
        value: docker-registry.mw.local/
      - name: base-image
        value: python:3.12-3
      - name: git-application-values
        value: git@github.com:MatiWall/homelab.application-values.git
      - name: username
        value: matiwall
      - name: email
        value: matiwall@live.dk
  templates:
    - name: build-and-deploy
      dag:
        tasks:
          - name: git-clone
            templateRef:
              name: git-template
              template: git-clone
            arguments:
              parameters:
                - name: url
                  value:  "{{workflow.parameters.giturl}}{{workflow.parameters.repo}}"
          - name: build
            dependencies: [git-clone]
            template: build
            arguments:
              parameters:
                - name: subpath
                  value: "{{workflow.parameters.subpath}}"
                - name: repo
                  value: "{{workflow.parameters.repo}}"
          - name: update-version
            dependencies: [git-clone]
            template: update-version
            arguments:
              parameters:
                - name: subpath
                  value: "{{workflow.parameters.subpath}}"
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: registry
                  value: "{{workflow.parameters.registry}}"
                - name: base-image
                  value: "{{workflow.parameters.base-image}}"
          - name: extract-name-and-version
            dependencies: [update-version]
            template: extract-name-and-version
            arguments:
              parameters:
                - name: subpath
                  value: "{{workflow.parameters.subpath}}"
                - name: repo
                  value: "{{workflow.parameters.repo}}"
          - name: tag-and-push
            dependencies: [extract-name-and-version, build]
            template: tag-and-push
            arguments:
              parameters:
                - name: registry
                  value: "{{workflow.parameters.registry}}"
                - name: subpath
                  value: "{{workflow.parameters.subpath}}"
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: application-name
                  value: "{{tasks.extract-name-and-version.outputs.parameters.application-name}}"
                - name: version
                  value: "{{tasks.extract-name-and-version.outputs.parameters.version}}"
          - name: git-push
            dependencies: [tag-and-push]
            templateRef:
              name: git-template
              template: git-push
            arguments:
              parameters:
                - name: username
                  value: "{{workflow.parameters.username}}"
                - name: email
                  value: "{{workflow.parameters.email}}"
                - name: path
                  value: "{{workflow.parameters.repo}}"
                - name: commit-message
                  value: "Updated {{tasks.extract-name-and-version.outputs.parameters.application-name}} to {{tasks.extract-name-and-version.outputs.parameters.version}}"
                  
          - name: update-values
            dependencies: [tag-and-push]
            templateRef:
              name: application-values-tag-updater
              template: update-values-tag
            arguments:
              parameters:
                - name: version
                  value: "{{tasks.extract-name-and-version.outputs.parameters.version}}"
                - name: application-name
                  value: "{{tasks.extract-name-and-version.outputs.parameters.application-name}}"
   
    - name: build
      inputs:
        parameters:
          - name: subpath
          - name: repo
      volumes:
        - name: docker-daemon-config
          configMap:
            name: docker-daemon-config
      container:
        image: docker:latest
        command: [sh, -c]
        args:
          - |
            ls
            until docker ps; do sleep 1; done;
            docker build -t image:0.0.1 .
            docker save -o /src/image.tar image:0.0.1
        workingDir: /src/{{inputs.parameters.repo}}/{{inputs.parameters.subpath}}
        volumeMounts:
          - name: workdir
            mountPath: src/
          - name: docker-daemon-config
            mountPath: /etc/docker/daemon.json
            subPath: daemon.json
        env:
          - name: DOCKER_HOST
            value: tcp://localhost:2375
      sidecars:
      - name: docker-in-docker
        image: docker:dind
        securityContext:
          privileged: true
        mirrorVolumeMounts: true
        command: ["dockerd", "--host=unix:///var/run/docker.sock", "--host=tcp://0.0.0.0:2375"]
        ports:
          - containerPort: 2375  # Expose Docker daemon on HTTP port
    - name: update-version
      inputs:
        parameters:
          - name: subpath
          - name: repo
          - name: registry
          - name: base-image
      script:
        image: "{{inputs.parameters.registry}}{{inputs.parameters.base-image}}"
        command: [python]
        source: |
          import yaml

          file = 'catcode.yaml'
          with open(file, 'r') as f:
              data = yaml.safe_load(f)
          
          version = data['metadata']['version']

          l = version.split('.')
          l[2] = str(int(l[2]) + 1)

          data['metadata']['version'] = '.'.join(l)

          with open(file, 'w') as f:
              yaml.safe_dump(data, f, default_flow_style=False, sort_keys=False)

        workingDir: /src/{{inputs.parameters.repo}}/{{inputs.parameters.subpath}}
        volumeMounts:
          - name: workdir
            mountPath: src/
    - name: extract-name-and-version
      inputs:
        parameters:
          - name: subpath
          - name: repo
      container:
        image: alpine:latest
        command: [sh, -c]
        args:
          - |
            extract_field() {
              local field_name="$1"
              local yaml_file="$2"
              # Use sed to find the line containing the field and extract the value
              sed -n "s/^\s*$field_name:\s*\(.*\)/\1/p" "$yaml_file" | tr -d '"'
            }

            system=$(extract_field "system" catcode.yaml)
            application=$(extract_field "application" catcode.yaml)
            deployableUnit=$(extract_field "deployableUnit" catcode.yaml)
            version=$(extract_field "version" catcode.yaml)

            # Debug prints
            echo "system: $system"
            echo "Application $application"
            echo "Deployable Unit: $deployableUnit"
            echo "Version: $version" 

            name="${system}.${application}.${deployableUnit}"
            echo "Found application name $name and version $version"
            echo "$name" >> /tmp/name.txt
            echo "$version" >> /tmp/version.txt
        workingDir: /src/{{inputs.parameters.repo}}/{{inputs.parameters.subpath}}
        volumeMounts:
          - name: workdir
            mountPath: src/
      outputs:
        parameters:
          - name: version
            valueFrom:
              path: /tmp/version.txt
          - name: application-name  # name of output parameter
            valueFrom:
              path: /tmp/name.txt
    - name: tag-and-push
      inputs:
        parameters:
          - name: registry
          - name: subpath
          - name: repo
          - name: application-name
          - name: version
      volumes:
        - name: docker-daemon-config
          configMap:
            name: docker-daemon-config
      container:
        image: docker:latest
        command: [sh, -c]
        args:
          - |
            ls -l
            until docker ps; do sleep 1; done;

            docker load < /src/image.tar

            image="{{inputs.parameters.registry}}{{inputs.parameters.application-name}}:{{inputs.parameters.version}}"

            docker tag image:0.0.1 "$image"
            docker push "$image"
        workingDir: /src/{{inputs.parameters.repo}}/{{inputs.parameters.subpath}}
        volumeMounts:
          - name: workdir
            mountPath: src/
          - name: docker-daemon-config
            mountPath: /etc/docker/daemon.json
            subPath: daemon.json
        env:
          - name: DOCKER_HOST
            value: tcp://localhost:2375
      sidecars:
      - name: docker-in-docker
        image: docker:dind
        securityContext:
          privileged: true
        mirrorVolumeMounts: true
        command: ["dockerd", "--host=unix:///var/run/docker.sock", "--host=tcp://0.0.0.0:2375"]
        ports:
          - containerPort: 2375  # Expose Docker daemon on HTTP port  
          