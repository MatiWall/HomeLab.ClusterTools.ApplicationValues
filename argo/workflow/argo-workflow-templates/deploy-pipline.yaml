apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: deploy-pipline
spec:
  entrypoint: build-and-deploy
  serviceAccountName: argo-workflow-svc
  volumeClaimTemplates:                 # define volume, same syntax as k8s Pod spec
    - metadata:
        name: workdir                     # name of volume claim
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

  arguments:
    parameters:
      - name: giturl
        value: https://github.com/MatiWall/  # Provide the correct GitHub URL here
      - name: revision
        value: HEAD
      - name: branch
        value: master
      - name: repo
        value: catcode-backend
      - name: subpath
        value: /services/core-api
      - name: registry
        value: docker-registry.mw.local/
      - name: base-image
        value: python:3.12-2
      - name: git-application-values
        value: https://github.com/MatiWall/homelab.application-values.git
      - name: username
        value: matiwall
      - name: email
        value: matiwall@live.dk
  templates:
    - name: build-and-deploy
      steps:
        - - name: cloner
            template: cloner
            arguments:
              parameters:
                - name: giturl
                  value: "{{workflow.parameters.giturl}}"
                - name: revision
                  value: "{{workflow.parameters.revision}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: subpath
                  value: "{{workflow.parameters.subpath}}"
        - - name: build
            template: build
            arguments:
              parameters:
                - name: subpath
                  value: "{{workflow.parameters.subpath}}"
        - - name: update-version
            template: update-version
            arguments:
              parameters:
                - name: subpath
                  value: "{{workflow.parameters.subpath}}"
                  
        - - name: tag-and-push
            template: tag-and-push
            arguments:
              parameters:
                - name: registry
                  value: "{{workflow.parameters.registry}}"
                - name: subpath
                  value: "{{workflow.parameters.subpath}}"
        - - name: extract-name-and-version
            template: extract-name-and-version
            arguments:
              parameters:
                - name: subpath
                  value: "{{workflow.parameters.subpath}}"
        - - name: git-push
            templateRef:
              name: git-push-template
              template: git-push
            arguments:
              parameters:
                - name: username
                  value: "{{workflow.parameters.username}}"
                - name: email
                  value: "{{workflow.parameters.email}}"
                - name: path
                  value: "{{workflow.parameters.repo}}"
                - name: commit-message
                  value: "Updated {{steps.extract-name-and-version.outputs.parameters.application-name}} to {{steps.extract-name-and-version.outputs.parameters.version}}"
                  
        - - name: update-values
            templateRef:
              name: application-values-tag-updater
              template: update-values-tag
            arguments:
              parameters:
                - name: username
                  value: "{{workflow.parameters.username}}"
                - name: email
                  value: "{{workflow.parameters.email}}"
                - name: version
                  value: "{{steps.extract-name-and-version.outputs.parameters.version}}"
                - name: application-name
                  value: "{{steps.extract-name-and-version.outputs.parameters.application-name}}"

   
    - name: cloner
      inputs:
        parameters:
          - name: giturl
          - name: revision
          - name: branch
          - name: repo
          - name: subpath
      container:
        image: alpine/git:latest
        command: [sh, -c]
        args:
          - |
            git clone {{inputs.parameters.giturl}}{{inputs.parameters.repo}}
        workingDir: /src
        volumeMounts:
          - name: workdir
            mountPath: src/
    - name: build
      inputs:
        parameters:
          - name: subpath
      container:
        image: docker:latest
        command: [sh, -c]
        args:
          - |
            until docker ps; do sleep 1; done;
            docker build -t image:0.0.1 .
            docker save -o /src/image.tar image:0.0.1
            ls -l /src
        workingDir: /src/{{inputs.parameters.subpath}}
        volumeMounts:
          - name: workdir
            mountPath: src/
        env:
          - name: DOCKER_HOST
            value: tcp://localhost:2375
      sidecars:
      - name: docker-in-docker
        image: docker:dind
        securityContext:
          privileged: true
        mirrorVolumeMounts: true
        command: ["dockerd", "--host=unix:///var/run/docker.sock", "--host=tcp://0.0.0.0:2375"]
        ports:
          - containerPort: 2375  # Expose Docker daemon on HTTP port
    - name: update-version
      inputs:
        parameters:
          - name: subpath
      container:
        image: alpine:latest
        command: [sh, -c]
        args:
          - |
            version=$(cat .version)
            IFS='.' read -r -a version_parts <<< "$version"
            ((version_parts[2]++))
            new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
            echo "$new_version" > .version
            echo "Updated version to $new_version"
    - name: tag-and-push
      inputs:
        parameters:
          - name: registry
          - name: subpath
      container:
        image: docker:latest
        command: [sh, -c]
        args:
          - |
            ls -l
            until docker ps; do sleep 1; done;
            name=$(cat pyproject.toml | grep name | head -1 | grep -oh "\".*\"")
            version=$(cat .version)
            docker load < /src/image.tar
            docker tag image:0.0.1 {{inputs.parameters.registry}}:$version
            docker push {{inputs.parameters.registry}}/$name:$version
        workingDir: /src/{{inputs.parameters.subpath}}
        volumeMounts:
          - name: workdir
            mountPath: src/
          - name: docker-daemon-config
            mountPath: /etc/docker/daemon.json
            subPath: daemon.json
        env:
          - name: DOCKER_HOST
            value: tcp://localhost:2375
      sidecars:
      - name: docker-in-docker
        image: docker:dind
        securityContext:
          privileged: true
        mirrorVolumeMounts: true
        command: ["dockerd", "--host=unix:///var/run/docker.sock", "--host=tcp://0.0.0.0:2375"]
        ports:
          - containerPort: 2375  # Expose Docker daemon on HTTP port  
            
    - name: extract-name-and-version
      inputs:
        parameters:
          - name: subpath
      container:
        image: alpine.latest
        command: [sh, -c]
        args:
          - |
            name=$(cat pyproject.toml | grep name | head -1 | grep -oh "\".*\"")
            version=$(cat .version)
            echo "Found application name $name and version $version"
            cat $name >> /tmp/name.txt
            cat $version >> /tmp/version.txt
        workingDir: /src/{{inputs.parameters.subpath}}
        volumeMounts:
          - name: workdir
            mountPath: src/
        outputs:
          parameters:
          - name: version
            valueFrom:
              path: /tmp/version.txt
          - name: application-name  # name of output parameter
            valueFrom:
              path: /tmp/name.txt

  volumes:
    - name: docker-daemon-config
      configMap:
        name: docker-daemon-config