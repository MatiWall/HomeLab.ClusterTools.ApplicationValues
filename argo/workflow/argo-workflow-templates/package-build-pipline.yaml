apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: package-build-pipline
spec:
  entrypoint: build-and-deploy
  ttlStrategy:
    secondsAfterCompletion: 3600 # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
    secondsAfterSuccess: 3600     # Time to live after workflow is successful
    secondsAfterFailure: 3600
  serviceAccountName: argo-workflow-svc
  volumeClaimTemplates:                 # define volume, same syntax as k8s Pod spec
    - metadata:
        name: workdir                     # name of volume claim
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

  arguments:
    parameters:
      - name: giturl
        value: git@github.com:MatiWall/ # Provide the correct GitHub URL here
      - name: revision
        value: HEAD
      - name: branch
        value: main
      - name: path
        value: extensions-configuration #opentelemetry
      - name: registry
        value: docker-registry.mw.local/
      - name: base-image
        value: python:3.12-2
      
  templates:
    - name: build-and-deploy
      steps:
        - - name: git-clone
            templateRef:
              name: git-template
              template: git-clone
            arguments:
              parameters:
                - name: url
                  value:  "{{workflow.parameters.giturl}}{{workflow.parameters.path}}"
        - - name: install-dependencies
            template: install-dependencies
            arguments:
              parameters:
                - name: registry
                  value: "{{workflow.parameters.registry}}"
                - name: base-image
                  value: "{{workflow.parameters.base-image}}"
        - - name: run-pytest
            template: run-pytest
            arguments:
              parameters:
                - name: registry
                  value: "{{workflow.parameters.registry}}"
                - name: base-image
                  value: "{{workflow.parameters.base-image}}"
          - name: run-mypy
            template: run-mypy
            arguments:
              parameters:
                - name: registry
                  value: "{{workflow.parameters.registry}}"
                - name: base-image
                  value: "{{workflow.parameters.base-image}}"
        - - name: build-package
            template: build-package
            arguments:
              parameters:
                - name: registry
                  value: "{{workflow.parameters.registry}}"
                - name: base-image
                  value: "{{workflow.parameters.base-image}}"
        - - name: push-package
            template: push-package
            arguments:
              parameters:
                - name: registry
                  value: "{{workflow.parameters.registry}}"
                - name: base-image
                  value: "{{workflow.parameters.base-image}}"

               
    - name: install-dependencies
      inputs:
        parameters:
          - name: registry
          - name: base-image
      imagePullPolicy: Always
      container:
        image: "{{inputs.parameters.registry}}{{inputs.parameters.base-image}}"
        command: [sh, -c]
        args:
          - |
            poetry install --with dev
        workingDir: /src/{{workflow.parameters.path}}
        volumeMounts:
          - name: workdir
            mountPath: /src
    - name: run-pytest
      inputs:
        parameters:
          - name: registry
          - name: base-image
      container:
        image: "{{inputs.parameters.registry}}{{inputs.parameters.base-image}}"
        command: [sh, -c]
        args:
          - poetry run pytest .
        workingDir: /src/{{workflow.parameters.path}}
        volumeMounts:
          - name: workdir
            mountPath: src/
    - name: run-mypy
      inputs:
        parameters:
          - name: registry
          - name: base-image
      container:
        image: "{{inputs.parameters.registry}}{{inputs.parameters.base-image}}"
        command: [sh, -c]
        args:
          - name=$(sed -n 's/^name = "\(.*\)-\(.*\)"/\1.\2/p' pyproject.toml) && poetry run mypy -p "$name"
        workingDir: /src/{{workflow.parameters.path}}
        volumeMounts:
          - name: workdir
            mountPath: src/
    - name: build-package
      inputs:
        parameters:
          - name: registry
          - name: base-image
      container:
        image: "{{inputs.parameters.registry}}{{inputs.parameters.base-image}}"
        command: [sh, -c]
        args:
          - poetry build
        workingDir: /src/{{workflow.parameters.path}}
        volumeMounts:
          - name: workdir
            mountPath: src/
    - name: push-package
      inputs:
        parameters:
          - name: registry
          - name: base-image
      container:
        image: "{{inputs.parameters.registry}}{{inputs.parameters.base-image}}"
        command: [sh, -c]
        args:
          - poetry publish -r private
        workingDir: /src/{{workflow.parameters.path}}
        volumeMounts:
          - name: workdir
            mountPath: src/
          
