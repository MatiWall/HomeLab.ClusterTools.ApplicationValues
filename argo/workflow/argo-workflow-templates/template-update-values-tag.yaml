apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: application-values-tag-updater
spec:
  entrypoint: update-values-tag
  serviceAccountName: argo-workflow-svc
  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
  volumes:
    - name: ssh-key
      secret:
        secretName: matiwall-git-ssh

  arguments:
    parameters:
      - name: git-application-values
        value: git@github.com:MatiWall/homelab.application-values.git
      - name: base-image
        value: docker-registry.mw.local/python:3.12-3
      - name: email
        value: matiwall@live.dk
      - name: username
        value: matiwall
      - name: application-name
        value: core-api
      - name: version
        value: 1.1.1a

  templates:
    - name: update-values-tag
      steps:
        - - name: cloner
            template: cloner
            arguments:
              parameters:
                - name: git-application-values
                  value: "{{workflow.parameters.git-application-values}}"
        - - name: find-application
            template: find-application
            arguments:
              parameters:
                - name: application-name
                  value: "{{workflow.parameters.application-name}}"
                - name: base-image
                  value: "{{workflow.parameters.base-image}}"
        - - name: update-yaml
            template: update-yaml
            arguments:
              parameters:
                - name: base-image
                  value: "{{workflow.parameters.base-image}}"
                - name: version
                  value: "{{workflow.parameters.version}}"
                - name: values-path
                  value: "{{steps.find-application.outputs.parameters.values-path}}"
        - - name: git-push
            templateRef:
              name: git-push-template
              template: git-push
            arguments:
              parameters:
                - name: username
                  value: "{{workflow.parameters.username}}"
                - name: email
                  value: "{{workflow.parameters.email}}"
                - name: commit-message
                  value: "updated {{workflow.parameters.application-name}} to version {{workflow.parameters.version}}"
                - name: path
                  value: "homelab.application-values/"

    - name: cloner
      inputs:
        parameters:
          - name: git-application-values
      container:
        image: alpine/git:latest
        command: [sh, -c]
        args:
          - |
            mkdir -p ~/.ssh
            cp /mnt/ssh-key/ssh-privatekey ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

            git clone "{{inputs.parameters.git-application-values}}"
        workingDir: /src
        volumeMounts:
          - name: workdir
            mountPath: /src
          - name: ssh-key
            mountPath: /mnt/ssh-key

    - name: find-application
      inputs:
        parameters:
          - name: application-name
      script:
        image: "alpine:latest"
        command: [sh]
        source: |
          APPLICATIONS_PATHS=$(grep -rl "{{inputs.parameters.application-name}}" /src) 
          for path in $APPLICATIONS_PATHS; 
          do
            if [[ ${path##*/} == "Chart.yaml" ]]; 
            then
              APPLICATION_PATH="$path"
              break
            fi
          done
          VALUES_PATH=$(echo "$APPLICATION_PATH" | sed 's/Chart.yaml$/values.yaml/')
          echo "$VALUES_PATH" > /tmp/values_path.txt
        workingDir: /src
        volumeMounts:
          - name: workdir
            mountPath: /src
      outputs:
        parameters:
          - name: values-path
            valueFrom:
              path: /tmp/values_path.txt
          

    - name: update-yaml
      inputs:
        parameters:
          - name: base-image
          - name: version
          - name: values-path
      script:
        image: "{{inputs.parameters.base-image}}"
        command: [python]
        source: |
          import yaml

          values_path = "{{inputs.parameters.values-path}}"
          with open(values_path, 'r') as f:
              data = yaml.safe_load(f)

          if data.get('cronjob'):
              application_type = 'cronjob'
          elif data.get('deployment'):
              application_type = 'deployment'
          else:
              raise ValueError('values.yaml does not include either a cronjob or deployment key')
          data[application_type]['image']['tag'] = "{{inputs.parameters.version}}"

          with open(values_path, 'w') as f:
              yaml.safe_dump(data, f, default_flow_style=False, sort_keys=False)
        workingDir: /src
        volumeMounts:
          - name: workdir
            mountPath: /src
          - name: workdir
            mountPath: /tmp
